apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx
  name: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #       - matchExpressions:
      #         - key: kubernetes.io/hostname
      #           operator: In
      #           values:
      #           - aks-agentpool-24430596-vmss000001
      #           - aks-agentpool-24430596-vmss000002
      # topologySpreadConstraints:
      #   - maxSkew: 1
      #     topologyKey: kubernetes.io/hostname
      #     whenUnsatisfiable: DoNotSchedule
      #     labelSelector:
      #       matchLabels:
      #         app: nginx
      volumes:
        - name: share-volume
          emptyDir: {}
      initContainers:
        - name: busybox
          image: busybox
          command:
            [
              "sh",
              "-c",
              'echo "<html><center><h1>$HOSTNAME is up and running !!!</h1></center></html>" >/data/html/index.html',
            ]
          volumeMounts:
            - name: share-volume
              mountPath: /data/html
      containers:
        - image: nginx:stable-alpine
          name: nginx
          securityContext:
            allowPrivilegeEscalation: false
          ports:
            - containerPort: 80
          volumeMounts:
            - name: share-volume
              mountPath: /usr/share/nginx/html
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: nginx
  name: nginx
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 80
      nodePort: 30080
  selector:
    app: nginx
  type: NodePort
status:
  loadBalancer: {}
